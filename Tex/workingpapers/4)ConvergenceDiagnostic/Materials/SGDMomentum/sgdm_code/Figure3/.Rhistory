j = 2
for(epoch in 1:nepoch) {
idx = sample(1:N)
i = 1
for(n in 1:(params$args$n_batch)) {
gradn = 0
# mini-batch loop
for (k in 1:batch_size) {
xi = data$X[idx[i], ]
yi = data$Y[idx[i]]
predi = sum(params$out$theta_all[, j-1] * xi)
gradn = gradn - (yi - data$glm_link(predi)) * xi
i = i + 1
}
params = batch_udpate(j, data, gradn, params)
j = j + 1
}
params = epoch_update(epoch, params)
}
if (verbose) {
plot_diag(j, params)
#plot_GMM(j, params)
}
return(params)
}
setwd("~/Google Drive/Documents/Academic Research/Baidu_2019/JChee_Clean_Final/SGDM-Diagnostic_clean/code/Figure2/")
rm(list=ls())
source("fig2_lib.R")
sgd_momentum <- function(data, theta0=NA, gamma=0.0005, nepoch=1, beta=0.9, batch_size=1, momentum.switch=TRUE, verbose=TRUE) {
params = init_opt(data=data, theta0=theta0, gamma=gamma, nepoch=nepoch, beta=beta, batch_size=batch_size, momentum.switch=momentum.switch)
N = nrow(data$X)
j = 2
for(epoch in 1:nepoch) {
idx = sample(1:N)
i = 1
for(n in 1:(params$args$n_batch)) {
gradn = 0
# mini-batch loop
for (k in 1:batch_size) {
xi = data$X[idx[i], ]
yi = data$Y[idx[i]]
predi = sum(params$out$theta_all[, j-1] * xi)
gradn = gradn - (yi - data$glm_link(predi)) * xi
i = i + 1
}
params = batch_udpate(j, data, gradn, params)
j = j + 1
}
params = epoch_update(epoch, params)
}
if (verbose) {
plot_diag(j, params)
#plot_GMM(j, params)
}
return(params)
}
dat = gen_data(sigma_x='id', sigma_noise=1)
params = sgd_momentum(dat, nepoch=20, beta=0.8, gamma=1e-2, batch_size=20, momentum.switch=FALSE)
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300))
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=TRUE)
source("fig2_lib.R")
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=TRUE)
source("fig2_lib.R")
sgd_momentum <- function(data, theta0=NA, gamma=0.0005, nepoch=1, beta=0.9, batch_size=1, momentum.switch=TRUE, verbose=TRUE) {
params = init_opt(data=data, theta0=theta0, gamma=gamma, nepoch=nepoch, beta=beta, batch_size=batch_size, momentum.switch=momentum.switch)
N = nrow(data$X)
j = 2
for(epoch in 1:nepoch) {
idx = sample(1:N)
i = 1
for(n in 1:(params$args$n_batch)) {
gradn = 0
# mini-batch loop
for (k in 1:batch_size) {
xi = data$X[idx[i], ]
yi = data$Y[idx[i]]
predi = sum(params$out$theta_all[, j-1] * xi)
gradn = gradn - (yi - data$glm_link(predi)) * xi
i = i + 1
}
params = batch_udpate(j, data, gradn, params)
j = j + 1
}
params = epoch_update(epoch, params)
}
if (verbose) {
plot_diag(j, params)
#plot_GMM(j, params)
}
return(params)
}
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=TRUE)
library(e1071)
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=TRUE)
library("plotrix")
install.packags("plotrix")
install.packages("plotrix")
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=TRUE)
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=FALSE)
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=FALSE)
library(plotrix)
plot_angle_norm <- function(params, circle.xy, circle.rad=c(0.2,200), plot_bool=FALSE) {
if (plot_bool) {
pdf("4-2_AngleNorm.pdf", width=8, height=8)
}
args = params$args
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
mean.final_nepoch = (args$nepoch-args$mean.burnin)
plot(tail(out$cos_loss_all, mean.final_nepoch*args$n_batch),
tail(out$grad_norm_all, mean.final_nepoch*args$n_batch),
pch=16, cex.main=2, cex.axis=2, cex.lab=2,
xlab='Cosine (angle) of successive gradients', ylab='Gradient norm',
main='Fig 7: High Mom Angle vs Norm in Stationary Phase')
abline(v=0, col='black', lty=1)
#draw.circle(circle.xy[1], circle.xy[2], border='red', radius=circle.rad, lwd=3.5)
legend(x='topright', legend='Key iterates with\nnegative angle and\nhigh gradient norm',
col='red', lty=1, lwd=3.5, cex=1.35, bty='n')
if (plot_bool) {
dev.off()
}
}
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=FALSE)
plot_angle_norm <- function(params, circle.xy, circle.rad=c(0.2,200), plot_bool=FALSE) {
if (plot_bool) {
pdf("4-2_AngleNorm.pdf", width=8, height=8)
}
args = params$args
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
mean.final_nepoch = (args$nepoch-args$mean.burnin)
plot(tail(out$cos_loss_all, mean.final_nepoch*args$n_batch),
tail(out$grad_norm_all, mean.final_nepoch*args$n_batch),
pch=16, cex.main=2, cex.axis=2, cex.lab=2,
xlab='Cosine (angle) of successive gradients', ylab='Gradient norm',
main='Fig 7: High Mom Angle vs Norm in Stationary Phase')
abline(v=0, col='black', lty=1)
#draw.circle(circle.xy[1], circle.xy[2], border='red', radius=circle.rad, lwd=3.5)
legend(x='topright', legend='Key iterates with\nnegative angle and\nhigh gradient norm',
col='red', lty=1, lwd=3.5, cex=1.35, bty='n')
if (plot_bool) {
dev.off()
}
}
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=FALSE)
setwd("~/Google Drive/Documents/Academic Research/Baidu_2019/JChee_Clean_Final/SGDM-Diagnostic_clean/code/Figure2/")
rm(list=ls())
source("fig2_lib.R")
sgd_momentum <- function(data, theta0=NA, gamma=0.0005, nepoch=1, beta=0.9, batch_size=1, momentum.switch=TRUE, verbose=TRUE) {
params = init_opt(data=data, theta0=theta0, gamma=gamma, nepoch=nepoch, beta=beta, batch_size=batch_size, momentum.switch=momentum.switch)
N = nrow(data$X)
j = 2
for(epoch in 1:nepoch) {
idx = sample(1:N)
i = 1
for(n in 1:(params$args$n_batch)) {
gradn = 0
# mini-batch loop
for (k in 1:batch_size) {
xi = data$X[idx[i], ]
yi = data$Y[idx[i]]
predi = sum(params$out$theta_all[, j-1] * xi)
gradn = gradn - (yi - data$glm_link(predi)) * xi
i = i + 1
}
params = batch_udpate(j, data, gradn, params)
j = j + 1
}
params = epoch_update(epoch, params)
}
if (verbose) {
plot_diag(j, params)
#plot_GMM(j, params)
}
return(params)
}
dat = gen_data(sigma_x='id', sigma_noise=1)
params = sgd_momentum(dat, nepoch=20, beta=0.8, gamma=1e-2, batch_size=20, momentum.switch=FALSE)
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=FALSE)
plot_angle_norm <- function(params, circle.xy, circle.rad=c(0.2,200), plot_bool=FALSE) {
if (plot_bool) {
pdf("4-2_AngleNorm.pdf", width=8, height=8)
}
args = params$args
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
mean.final_nepoch = (args$nepoch-args$mean.burnin)
plot(tail(out$cos_loss_all, mean.final_nepoch*args$n_batch),
tail(out$grad_norm_all, mean.final_nepoch*args$n_batch),
pch=16, cex.main=2, cex.axis=2, cex.lab=2,
xlab='Cosine (angle) of successive gradients', ylab='Gradient norm',
main='Fig 7: High Mom Angle vs Norm in Stationary Phase')
abline(v=0, col='black', lty=1)
draw.circle(circle.xy[1], circle.xy[2], border='red', radius=circle.rad, lwd=3.5)
legend(x='topright', legend='Key iterates with\nnegative angle and\nhigh gradient norm',
col='red', lty=1, lwd=3.5, cex=1.35, bty='n')
if (plot_bool) {
dev.off()
}
}
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=FALSE)
plot_angle_norm <- function(params, circle.xy, circle.rad=c(0.2,200), plot_bool=FALSE) {
if (plot_bool) {
pdf("4-2_AngleNorm.pdf", width=8, height=8)
}
args = params$args
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
mean.final_nepoch = (args$nepoch-args$mean.burnin)
plot(tail(out$cos_loss_all, mean.final_nepoch*args$n_batch),
tail(out$grad_norm_all, mean.final_nepoch*args$n_batch),
pch=16, cex.main=2, cex.axis=2, cex.lab=2,
xlab='Cosine (angle) of successive gradients', ylab='Gradient norm',
main='Fig 7: High Mom Angle vs Norm in Stationary Phase')
abline(v=0, col='black', lty=1)
#draw.circle(circle.xy[1], circle.xy[2], border='red', radius=circle.rad, lwd=3.5)
legend(x='topright', legend='Key iterates with\nnegative angle and\nhigh gradient norm',
col='red', lty=1, lwd=3.5, cex=1.35, bty='n')
if (plot_bool) {
dev.off()
}
}
params = sgd_momentum(dat, nepoch=20, beta=0.8, gamma=1e-2, batch_size=20, momentum.switch=FALSE)
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=FALSE)
plot_angle_norm <- function(params, circle.xy, circle.rad=c(0.2,200), plot_bool=FALSE) {
if (plot_bool) {
pdf("4-2_AngleNorm.pdf", width=8, height=8)
}
args = params$args
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
mean.final_nepoch = (args$nepoch-args$mean.burnin)
plot(tail(out$cos_loss_all, mean.final_nepoch*args$n_batch),
tail(out$grad_norm_all, mean.final_nepoch*args$n_batch),
pch=16, cex.main=2, cex.axis=2, cex.lab=2,
xlab='Cosine (angle) of successive gradients', ylab='Gradient norm',
main='Fig 7: High Mom Angle vs Norm in Stationary Phase')
abline(v=0, col='black', lty=1)
#draw.circle(circle.xy[1], circle.xy[2], border='red', radius=circle.rad, lwd=3.5)
#legend(x='topright', legend='Key iterates with\nnegative angle and\nhigh gradient norm',
#       col='red', lty=1, lwd=3.5, cex=1.35, bty='n')
if (plot_bool) {
dev.off()
}
}
params = sgd_momentum(dat, nepoch=20, beta=0.8, gamma=1e-2, batch_size=20, momentum.switch=FALSE)
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=FALSE)
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=TRUE)
plot_angle_norm <- function(params, circle.xy, circle.rad=c(0.2,200), plot_bool=FALSE) {
if (plot_bool) {
pdf("4-2_AngleNorm.pdf", width=8, height=8)
}
args = params$args
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
mean.final_nepoch = (args$nepoch-args$mean.burnin)
plot(tail(out$cos_loss_all, mean.final_nepoch*args$n_batch),
tail(out$grad_norm_all, mean.final_nepoch*args$n_batch),
pch=16, cex.main=2, cex.axis=2, cex.lab=2,
xlab='Cosine (angle) of successive gradients', ylab='Gradient norm',
main='Fig 7: High Mom Angle vs Norm in Stat Phase')
abline(v=0, col='black', lty=1)
#draw.circle(circle.xy[1], circle.xy[2], border='red', radius=circle.rad, lwd=3.5)
#legend(x='topright', legend='Key iterates with\nnegative angle and\nhigh gradient norm',
#       col='red', lty=1, lwd=3.5, cex=1.35, bty='n')
if (plot_bool) {
dev.off()
}
}
plot_angle_norm(params, circle.xy=c(-0.3,950), circle.rad=c(0.31,300), plot_bool=TRUE)
setwd("~/Google Drive/Documents/Academic Research/Baidu_2019/JChee_Clean_Final/SGDM-Diagnostic_clean/code/Figure3/")
rm(list=ls())
source("fig3_lib.R")
source("rebuttal_plotting.R")
library(Rcpp)
sourceCpp("fig3_sgd.cpp")
momentum_sgd <- function(data, theta0=NA, gamma=0.0005, nepoch=1, beta=0, batch_size=1,
burnin=1, constLR=TRUE, momentum_switch=FALSE, autoLR=FALSE, verbose=TRUE) {
# wrapper function
params = momentum_sgd_Cpp(trainX=data$X_train, testX=data$X_test, trainY=data$Y_train, testY=data$Y_test,
model_name=data$model,
gamma=gamma, nepoch=nepoch, beta=beta, batch_size=batch_size,
burnin=burnin, constLR=constLR, momentum_switch=momentum_switch,
autoLR=autoLR, seed=runif(1)*1e6)
params$out$train_loss = as.vector(params$out$train_loss)
params$out$test_loss = as.vector(params$out$test_loss)
params$out$train_acc = as.vector(params$out$train_acc)
params$out$test_acc = as.vector(params$out$test_acc)
params$out$ip_all = as.vector(params$out$ip_all)
params$out$grad_norm_all = as.vector(params$out$grad_norm_all)
params$out$mse_step = as.vector(params$out$mse_step)
plot_temp(params)
return(params)
}
test_mom <- function() {
dat = gen_data(sigma_x='id', sigma_noise=1, model="binomial")
dat$X_train = dat$X
dat$X_test  = dat$X
dat$Y_train  = dat$Y
dat$Y_test   = dat$Y
params = momentum_sgd(dat, nepoch=20, beta=0.5, gamma=0.5, batch_size=10)
# par(mfrow=c(2,1))
# plot(params$out$train_loss, type='l', ylab='train loss')
# plot(params$out$train_acc, type='l', ylab='train acc')
# par(mfrow=c(1,1))
}
plot_temp <- function(params) {
args = params$args
var  = params$var
out  = params$out
par(mfrow=c(4,2))
plot(out$train_loss, type='l', ylab='train loss', main='Train loss')
plot(out$test_loss, type='l', ylab='test loss', main='Test loss')
plot(out$train_acc, type='l', ylab='train acc', main='Train acc')
plot(out$test_acc, type='l', ylab='test acc', main='Test acc')
plot(out$ip_all, type='l',
main='IP')
plot(cumsum(tail(out$ip_all, args$niter_batch*args$nepoch - var$burnin[1])), type='l',
main='CUMSUM IP')
abline(h=0)
hist(log10(out$mse_step), breaks=30,
main='mse step')
hist(log10(out$grad_norm_all), breaks=30,
main='grad norm')
par(mfrow=c(1,1))
}
plot_pdf <- function(params1, params2, params3,
params1.const, params2.const, params3.const,
params1.decr, params2.decr, params3.decr,
pdf_bool=FALSE) {
if (pdf_bool) {
pdf("mnist_binary.pdf", width=10, height=8)
}
par(mar=c(5.1,5.1,4.1,2.1))
ll = 5
x = seq(0, 2, length.out=length(params1$out$test_acc))
plot(x, params1$out$test_acc, col='royalblue2', type='l', ylim=c(0.85, 0.97), lwd=ll,
cex.main=2, cex.axis=2, cex.lab=2,
xlab='Epoch', ylab='Test Accuracy', main='MNIST Binary Logistic Regression')
grid(col='darkgray', lwd=2, lty=1)
lines(x, params1$out$test_acc, col='royalblue2', lwd=ll)
lines(x, params2$out$test_acc, col='forestgreen', lwd=ll)
lines(x, params3$out$test_acc, col='firebrick3', lwd=ll)
lines(x, params1.decr$out$test_acc, col='purple', lty=2, lwd=ll)
lines(x, params2.decr$out$test_acc, col='black', lty=2, lwd=ll)
lines(x, params3.decr$out$test_acc, col='orange', lty=2, lwd=ll)
L = legend(x='bottomright', title='Initial LR',
legend=c('1.0', '0.1', '0.01', '1.0', '0.1', '0.01'),
col=c('royalblue2','forestgreen','firebrick3','purple','black','orange'),
lty=c(1,1,1,2,2,2), lwd=ll, bty='n', cex=1.5)
rect(xleft=L$rect$left-L$rect$w-0.02, xright=L$rect$left+L$rect$w,
ybottom=L$rect$top-L$rect$h, ytop=L$rect$top, col='white', lwd=1)
legend(x='bottomright', title='Initial LR',
legend=c('1.0', '0.1', '0.01', '1.0', '0.1', '0.01'),
col=c('royalblue2','forestgreen','firebrick3','purple','black','orange'),
lty=c(1,1,1,2,2,2), lwd=ll, bty='n', cex=1.5)
legend(x=L$rect$left-L$rect$w-0.01, y=L$rect$top, title='LR Schedule', legend=c('Auto', 'Decr'),
lty=c(1,2), col='darkgray', lwd=ll, bty='n', cex=1.5)
par(mar=c(5.1,4.1,4.1,2.1))
if (pdf_bool) {
dev.off()
}
}
data.mnist = readRDS("data.mnist.rds")
params_0.8mAB = momentum_sgd(data.mnist, gamma=0.1, nepoch=2, beta=0.8, batch_size=10,
burnin=0.2, momentum_switch=FALSE, autoLR=TRUE)
plot_stat(params_0.8mAB)
source("rebuttal_plotting.R")
plot_stat(params_0.8mAB)
plotstat_pdf(params_0.8mAB)
plotstat2_pdf <- function(params, pdf_bool=FALSE) {
args = params$args
var  = params$var
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
if (pdf_bool) {
pdf("RFig3_Stat.pdf", width=10, height=8)
}
ll = 5
par(mfrow=c(2,1))
x = seq(0, 2, length.out=length(params$out$test_acc))
plot(x, out$test_acc, type='l', xlab='Epoch', ylab='Test Acc',
main='Figure 3: Test Acc for SGDM with lr=0.001 on MNSIT',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
legend(x="bottomright", legend=c("Diagnostic Activation"), lty=2, lwd=ll, col='red', cex=1.5)
csum = cumsum(tail(out$ip_all, args$niter_batch*args$nepoch - var$burnin[1]))
x = seq(0, 2, length.out=length(csum))
plot(x, csum, type='l', xlab='Epoch', ylab='Test Stat',
main='Test Statistic for SGDM with lr=0.001 on MNIST',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
abline(h=0, lwd=ll)
par(mar=c(5.1,4.1,4.1,2.1))
if (pdf_bool) {
dev.off()
}
par(mfrow=c(1,1))
}
plotstat2_pdf(params_0.8mAB)
plotstat2_pdf <- function(params, pdf_bool=FALSE) {
args = params$args
var  = params$var
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
if (pdf_bool) {
pdf("RFig6_ablation.pdf", width=10, height=8)
}
ll = 5
par(mfrow=c(2,1))
x = seq(0, 2, length.out=length(params$out$test_acc))
plot(x, out$test_acc, type='l', xlab='Epoch', ylab='Test Acc',
main='Figure 6: High Mom Test Acc for Alg 1 & Mom Reduce on MNSIT',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
legend(x="bottomright", legend=c("Diagnostic Activation"), lty=2, lwd=ll, col='red', cex=1.5)
csum = cumsum(tail(out$ip_all, args$niter_batch*args$nepoch - var$burnin[1]))
x = seq(0, 2, length.out=length(csum))
plot(x, csum, type='l', xlab='Epoch', ylab='Test Stat',
main='Test Statistic for SGDM on MNIST',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
abline(h=0, lwd=ll)
par(mar=c(5.1,4.1,4.1,2.1))
if (pdf_bool) {
dev.off()
}
par(mfrow=c(1,1))
}
plotstat2_pdf(params_0.8mAB)
plotstat2_pdf <- function(params, pdf_bool=FALSE) {
args = params$args
var  = params$var
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
if (pdf_bool) {
pdf("RFig6_ablation.pdf", width=10, height=8)
}
ll = 5
par(mfrow=c(2,1))
x = seq(0, 2, length.out=length(params$out$test_acc))
plot(x, out$test_acc, type='l', xlab='Epoch', ylab='Test Acc',
main='Fig 6: High Mom Test Acc for Alg 1 & Mom Reduce on MNSIT',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
legend(x="bottomright", legend=c("Diagnostic Activation"), lty=2, lwd=ll, col='red', cex=1.5)
csum = cumsum(tail(out$ip_all, args$niter_batch*args$nepoch - var$burnin[1]))
x = seq(0, 2, length.out=length(csum))
plot(x, csum, type='l', xlab='Epoch', ylab='Test Stat',
main='Test Statistic for SGDM on MNIST',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
abline(h=0, lwd=ll)
par(mar=c(5.1,4.1,4.1,2.1))
if (pdf_bool) {
dev.off()
}
par(mfrow=c(1,1))
}
plotstat2_pdf(params_0.8mAB)
plotstat2_pdf <- function(params, pdf_bool=FALSE) {
args = params$args
var  = params$var
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
if (pdf_bool) {
pdf("RFig6_ablation.pdf", width=10, height=8)
}
ll = 5
par(mfrow=c(2,1))
x = seq(0, 2, length.out=length(params$out$test_acc))
plot(x, out$test_acc, type='l', xlab='Epoch', ylab='Test Acc',
main='Fig 6: High Mom Test Acc & No Mom Red on MNSIT',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
legend(x="bottomright", legend=c("Diagnostic Activation"), lty=2, lwd=ll, col='red', cex=1.5)
csum = cumsum(tail(out$ip_all, args$niter_batch*args$nepoch - var$burnin[1]))
x = seq(0, 2, length.out=length(csum))
plot(x, csum, type='l', xlab='Epoch', ylab='Test Stat',
main='Test Statistic for SGDM on MNIST',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
abline(h=0, lwd=ll)
par(mar=c(5.1,4.1,4.1,2.1))
if (pdf_bool) {
dev.off()
}
par(mfrow=c(1,1))
}
plotstat2_pdf(params_0.8mAB)
plotstat2_pdf <- function(params, pdf_bool=FALSE) {
args = params$args
var  = params$var
out  = params$out
par(mar=c(5.1,5.1,4.1,2.1))
if (pdf_bool) {
pdf("RFig6_ablation.pdf", width=10, height=8)
}
ll = 5
par(mfrow=c(2,1))
x = seq(0, 2, length.out=length(params$out$test_acc))
plot(x, out$test_acc, type='l', xlab='Epoch', ylab='Test Acc',
main='Fig 6: High Mom Test Acc & No Mom Red (MNSIT)',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
legend(x="bottomright", legend=c("Diagnostic Activation"), lty=2, lwd=ll, col='red', cex=1.5)
csum = cumsum(tail(out$ip_all, args$niter_batch*args$nepoch - var$burnin[1]))
x = seq(0, 2, length.out=length(csum))
plot(x, csum, type='l', xlab='Epoch', ylab='Test Stat',
main='Test Statistic for SGDM on MNIST',
cex.main=2, cex.axis=2, cex.lab=2, lwd=ll)
abline(h=0, lwd=ll)
par(mar=c(5.1,4.1,4.1,2.1))
if (pdf_bool) {
dev.off()
}
par(mfrow=c(1,1))
}
plotstat2_pdf(params_0.8mAB)
plotstat2_pdf(params_0.8mAB, plot_pdf=TRUE)
plotstat2_pdf(params_0.8mAB,  pdf_bool=TRUE)
